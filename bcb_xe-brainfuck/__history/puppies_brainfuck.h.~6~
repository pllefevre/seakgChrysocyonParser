//---------------------------------------------------------------------------

#ifndef puppies_brainfuckH
#define puppies_brainfuckH

namespace brainfuck
{
  class core
  {
    public:
      core();
      void next();  // >
      void prev();  // <
      void inc(); // +
      void decr(); // -
      int  get(); // .
      void set(int ch); // ,

    private:
      vector<int> m_vSlots;
      int m_nPos;
  };


  template<typename Element, typename ArrayOfElement> class brainfuckPuppyMain;
template <>
class brainfuckPuppyNextSlot<wchar_t,wchar_t> : public seakgChrysocyon::InterfaceChrysocyonPuppy<wchar_t,wchar_t>
{
	public:
		brainfuckPuppyNextSlot(brainfuck::core *pCore) : m_pCore(pCore) { m_chResult = 0; };

		// InterfaceChrysocyonPuppy
		virtual seakgChrysocyon::chrysocyonAnswer SendElement(wchar_t ch)
		{
      if( ch == '>' )
      {
        m_pCore->next();
        return seakgChrysocyon::schsComplete;
      }
      else if( ch == '<' )
      {
        m_pCore->prev();
        return seakgChrysocyon::schsComplete;
      }
      else if( ch == '+' )
      {
        m_pCore->inc();
        return seakgChrysocyon::schsComplete;
      }
      else if( ch == '-' )
      {
        m_pCore->decr();
        return seakgChrysocyon::schsComplete;
      }
      else if( ch == '.' )
      {
        m_chResult = m_pCore->get();
        return seakgChrysocyon::schsComplete;
      }
      else if( ch == ',' )
      {
        int ch = getch();
        m_pCore->set(ch);
        return seakgChrysocyon::schsComplete;
      }

			return seakgChrysocyon::schsNone;
		};

		virtual void GetResult( seakgChrysocyon::Stack<wchar_t> *pStackResult )
		{
			pStackResult->Push( m_chResult );
		};

		/*
		virtual UnicodeString &GetResult( ) // seakgChrysocyon::Stack<UnicodeString> *pStackResult)
		{
			//std::cout << " seakgPuppyNumber::GetResult [" << m_strContent.toStdString() << "] \n";
			//pStackResult->Push();
			m_strResult = "number:" + m_strContent;
			return m_strResult;
		};
		*/

		virtual void Reset() { m_chResult = ' '; };
		virtual bool StepBack() { return false; };

	private:
		wchar_t m_chResult;
    brainfuck::core *m_pCore;
};


}; // namespace brainfuck

//---------------------------------------------------------------------------
#endif
