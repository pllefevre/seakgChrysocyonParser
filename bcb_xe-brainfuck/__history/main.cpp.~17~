//---------------------------------------------------------------------------

#include <vcl.h>
#include <iostream.h>
#pragma hdrstop

#include <tchar.h>
//---------------------------------------------------------------------------

#include "puppies_brainfuck.h"

//#include "../seakgChrysocyonParser/bcb_xe.h"

brainfuck::core *g_pCore;

typedef seakgChrysocyon::Parser<wchar_t,wchar_t> CharParser;
typedef seakgReaderFromUnicodeString<wchar_t> CharReader;


typedef brainfuck::puppyMain<wchar_t,wchar_t> PuppyMain;


typedef seakgPuppyNumber<wchar_t,UnicodeString> PuppyNumber;
typedef seakgPuppyName<wchar_t,UnicodeString> PuppyName;
typedef seakgPuppyAnySimbol<wchar_t,UnicodeString> PuppyAnySimbol;
typedef seakgPuppyStringInDoubleQuotes<wchar_t,UnicodeString> PuppyStringInDoubleQuotes;
//typedef seakgPuppyLine<QChar,QString> PuppyLine;

//----------------------------------------------------------------------------

void init_layer_first( CharParser *pParser )
{

  pParser->AddPuppy( new PuppyMain(g_pCore) );

//	pParser->AddPuppy( new PuppyNumber() );
//	pParser->AddPuppy( new PuppyName() );
//	pParser->AddPuppy( new PuppyStringInDoubleQuotes() );
/*	pParser->AddPuppy( new PuppyAnySimbol('<') );
	pParser->AddPuppy( new PuppyAnySimbol('>') );
	pParser->AddPuppy( new PuppyAnySimbol('+') );
	pParser->AddPuppy( new PuppyAnySimbol('-') );
	pParser->AddPuppy( new PuppyAnySimbol('.') );
	pParser->AddPuppy( new PuppyAnySimbol(',') );
	pParser->AddPuppy( new PuppyAnySimbol('[') );
	pParser->AddPuppy( new PuppyAnySimbol(']') );
	pParser->AddPuppy( new PuppyAnySimbol('\r') );
	pParser->AddPuppy( new PuppyAnySimbol('\n') );
*/

};

//----------------------------------------------------------------------------

#pragma argsused
int _tmain(int argc, _TCHAR* argv[])
{
  if( argc == 2 )
  {
    UnicodeString filename(argv[1]);

    std::cout << "1\r\n";

    TStringList *list = new TStringList();
    list->LoadFromFile(filename);

    std::cout << "2\r\n";

    g_pCore = new brainfuck::core();

    std::cout << "3\r\n";

    CharReader *pReader = new CharReader();
   	pReader->setString( list->Text );

    std::cout << "4\r\n";

    CharParser *pParserLayerFirst = new CharParser(pReader);

    std::cout << "5\r\n";

	  init_layer_first( pParserLayerFirst );

    std::cout << "6\r\n";

    while( ! pParserLayerFirst->Eof() )
    {
      std::cout << "7\r\n";

      wchar_t chResult;
      int err;

      std::cout << "8\r\n";

      if( pParserLayerFirst->GetNextElement( chResult, err ) )
      {
        if(chResult != 0)
          std::wcout << L"[" << chResult << L"]\n";

      }
      else
      {
        std::cout << "[err=" << (int)err << "]\n";
        break;
      };
    };
    std::cout << "\r\n-----------";
    std::cout << "\r\n";
  }
  else
  {
    wcout << "Useage: brainfuck <filename>\r\n";
  };
  return 0;
}
//---------------------------------------------------------------------------
